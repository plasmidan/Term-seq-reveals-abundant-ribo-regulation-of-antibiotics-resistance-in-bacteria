#!/bin/env perl -w 
use strict; 

###########################################       calculate_riboactivity_from_termseq.pl    #############################################################################
######	Use term-seq terminator coverage to calcaulte the ratio of terminated vs. readthrough transcripts across all regulators where both terminators were detected
######	Takes the putative regulator table generated by the map_putative_regulatory_5UTRs.pl script and manually add the positions of the gene terminator
######	experiment_file specifies where to find RNA-seq coverage maps for calculation
######	run example: perl calculate_riboactivity_from_termseq.pl regulator_table experiment_file
#########################################################################################################################################################################

#Modules
use common_scripts;

#command line inputs
my ($candidate_table,$experiment_file,$pillar_span) = @ARGV;
$pillar_span = 10 if (!$pillar_span);

#collect genes from candidate table 
open(CAND,$candidate_table) or die "can't open candidate file $candidate_table\n";
my @gene_candidates; 
chomp (my $line_header = <CAND>);
while (<CAND>) { 
	chomp; 
	my $line = $_;
	my $gene;
	my @line = split(/\t/);
	$gene->{_line} = $line;
	$gene->{_fr} = $line[1];
	$gene->{_to} = $line[2];
	$gene->{_st} = $line[3];
	$gene->{_r5utr_term_pos} = $line[11];
	$gene->{_gene_term_pos} = $line[16];
	push @gene_candidates,$gene;
}

### Collect data
open(EXPS,$experiment_file) or die "can't open experiment file $experiment_file\n";
my %exp_hash; 
my @experiments;
my @samples;
while (<EXPS>) { 
	chomp;
	my ($type,$project_dir,$run_dir,$sample_name,$exp_name) = split(/\t/); 
	next unless ($type eq 'end3');
	my $path = "/home/labs/sorek/repos/projects/$project_dir/$run_dir/intermediate/$run_dir.s2"; 
	open (SAMPLE,$path) or die "can't open Coverage file for sample $run_dir at $path\n";
	push @experiments,$exp_name;
	push @samples,$sample_name;
	$exp_hash{$exp_name} = 1;
	my %exp_sample_data_hash; 
	while (<SAMPLE>) { 
		my @line = split(/\t/); 
		my ($pos,$coverage,$strand) = @line[2,4,6]; 
		$exp_sample_data_hash{$strand}->{$pos} = $coverage;
	}
	GENES: foreach my $gene (@gene_candidates) {
	my $gene_info = $gene->{_line};
		my $readthrough = 0;
		my $gene_st = $gene->{_st}; 
		my $r5utr_term_pos = $gene->{_r5utr_term_pos};
		my @r5utr_positions_spanned; 
		my $r5utr_coverage = 0;
		my $gene_term_pos =	$gene->{_gene_term_pos};
		my @gene_positions_spanned; 
		my $gene_coverage = 0;	
		for (my $i = $r5utr_term_pos-$pillar_span; $i <= $r5utr_term_pos+$pillar_span; $i++) { 
			push @r5utr_positions_spanned,$i;
		}
		if ($gene_term_pos eq 'NA') { 
			$gene->{_readthrough}->{$exp_name}->{$sample_name} = 0; 
			$gene->{_gene_cov}->{$exp_name}->{$sample_name} = 'NA'; 
			my $pos_st = ($gene->{_st} eq '+') ? '-' : '+';
			foreach my $pos (@r5utr_positions_spanned) {
				$r5utr_coverage += $exp_sample_data_hash{$pos_st}->{$pos} if ($exp_sample_data_hash{$pos_st}->{$pos}); 
			}
			$gene->{_r5utr_cov}->{$exp_name}->{$sample_name} = $r5utr_coverage;
			next GENES;
		}						
		elsif ($gene_term_pos eq 'FLAG') { 
			$gene->{_readthrough}->{$exp_name}->{$sample_name} = 'NA';
			$gene->{_gene_cov}->{$exp_name}->{$sample_name} = 'NA';
			$gene->{_r5utr_cov}->{$exp_name}->{$sample_name} = 'NA';
			next GENES;
		}		
		for (my $i = $gene_term_pos-$pillar_span; $i <= $gene_term_pos+$pillar_span; $i++) { 
			push @gene_positions_spanned,$i;
		}
		my $pos_st = ($gene->{_st} eq '+') ? '-' : '+';
		foreach my $pos (@r5utr_positions_spanned) {
			$r5utr_coverage += $exp_sample_data_hash{$pos_st}->{$pos} if ($exp_sample_data_hash{$pos_st}->{$pos}); 
		}
		foreach my $pos (@gene_positions_spanned) {
			$gene_coverage += $exp_sample_data_hash{$pos_st}->{$pos} if ($exp_sample_data_hash{$pos_st}->{$pos});
		}
		$readthrough = $gene_coverage / ($gene_coverage + $r5utr_coverage + 0.01); 
		$gene->{_readthrough}->{$exp_name}->{$sample_name} = $readthrough;
		$gene->{_gene_cov}->{$exp_name}->{$sample_name} = $gene_coverage;
		$gene->{_r5utr_cov}->{$exp_name}->{$sample_name} = $r5utr_coverage;
	}
}

#calcaulte mean readthrough per experiment
foreach my $gene (@gene_candidates) {
	my @experiments = keys %{$gene->{_readthrough}};
	foreach my $exp_name (@experiments) { 
		my @sample_readthrough_array; 
		my @samples = keys %{$gene->{_readthrough}->{$exp_name}};
		foreach my $sample_name (@samples) { 
			my $sample_readthrough = $gene->{_readthrough}->{$exp_name}->{$sample_name}; 
			push @sample_readthrough_array,$sample_readthrough;
		}
		if ($gene->{_r5utr_term_pos} eq 'FLAG' or $gene->{_r5utr_term_pos} eq 'NA') { 
			$gene->{_exp_avg}->{$exp_name} = 'NA';
			$gene->{_exp_stdv}->{$exp_name} = 'NA';
			next; 		
		}
		else { 
			my $exp_avg = common_scripts->average(\@sample_readthrough_array);;
			my $exp_stdv = common_scripts->std_dev($exp_avg,\@sample_readthrough_array);
			$gene->{_averages}->{$exp_name} = $exp_avg; 
			$gene->{_stdvs}->{$exp_name} = $exp_stdv;
		}
	}
}

#report readthrough calculations
my $gene_field_headers =$line_header; 
my $mean_per_exp_header;
my $stdv_per_exp_header;
foreach my $exp_name (keys %exp_hash) { 
	$mean_per_exp_header  .= "\t${exp_name}_mean";
	$stdv_per_exp_header  .= "\t${exp_name}_stdv";
}
my $readthrough_per_sample_header;
for (my $i = 0; $i<=$#experiments; $i++) { 
	my $exp_name = $experiments[$i];
	my $sample_name = $samples[$i];
	my $output_name = $exp_name . "-" . $sample_name;
	$readthrough_per_sample_header .= "\t$output_name";
}
my $raw_cov_gene_and_reg_header;
for (my $i = 0; $i<=$#experiments; $i++) { 
	my $exp_name = $experiments[$i];
	my $sample_name = $samples[$i];
	my $output_name_gene = $exp_name . "-" . $sample_name . "_gene";
	my $output_name_reg = $exp_name . "-" . $sample_name . "_r5utr";
	$raw_cov_gene_and_reg_header .= "\t$output_name_reg\t$output_name_gene";
}
print $gene_field_headers;
print $mean_per_exp_header;
print $stdv_per_exp_header;
print $readthrough_per_sample_header;
print $raw_cov_gene_and_reg_header;
print "\n";

foreach my $gene (@gene_candidates) { 
	my $line = $gene->{_line};
	print "$line";
	foreach my $exp_name (keys %exp_hash) {
		my $print_val = $gene->{_averages}->{$exp_name};
		print "\t$print_val";
	}
	foreach my $exp_name (keys %exp_hash) {
		my $print_val = $gene->{_stdvs}->{$exp_name};
		print "\t$print_val";
	}
	for (my $i = 0; $i<=$#experiments; $i++) { 
		my $exp_name = $experiments[$i];
		my $sample_name = $samples[$i];
		my $sample_readthrough = $gene->{_readthrough}->{$exp_name}->{$sample_name}; 
		print "\t$sample_readthrough";
	}
	for (my $i = 0; $i<=$#experiments; $i++) { 
		my $exp_name = $experiments[$i];
		my $sample_name = $samples[$i];
		my $gene_cov = $gene->{_gene_cov}->{$exp_name}->{$sample_name};
		my $r5utr_cov = $gene->{_r5utr_cov}->{$exp_name}->{$sample_name};
		print "\t$r5utr_cov\t$gene_cov";
	}	
	print "\n";
}